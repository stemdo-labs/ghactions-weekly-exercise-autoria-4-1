name: Reusable Container Workflow

on:
  workflow_dispatch:
    inputs:
      execute-manually:
        description: 'Ejecutar manualmente el flujo de trabajo'
        required: true
        default: 'true'
  push:
    branches:
      - main 
      - dev


jobs:
  set_image_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.set_image_tag.outputs.version}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Image Tag
        id: set_image_tag
        run: | 
          echo "version=$(jq -r .version package.json)" >> "$GITHUB_OUTPUT"
          echo $GITHUB_OUTPUT

  build_and_push:
    needs: set_image_tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        

      - name: Login to Registry
        uses: ./actions/loginRegistry.yml
        with: 
          docker_username: ${{ secrets.REGISTRY_USERNAME }}
          registry_password: ${{ secrets.REGISTRY_PASSWORD }}


      - name: Set Image Tag
        run: |
          
          echo "Image tag set to: ${{ needs.set_image_tag.outputs.tag }}"
          sed -i "s/<IMAGE_TAG>/${{ needs.set_image_tag.outputs.tag }}/g" Dockerfile 
        # Este comando establece la etiqueta de la imagen como el hash de confirmación actual de GitHub.
        #buscando todas las ocurrencias de image tag en el dockerfile
        #cada vez que se cree una nueva imagen tendrá una etiqueta unica asociada al hash del commit

      - name: Build and Push Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/app:${{ needs.set_image_tag.outputs.tag }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/app:${{ needs.set_image_tag.outputs.tag }}
